# -*- coding: utf-8 -*-
"""pengenalan 3 Unsupervised.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZUuFIuDiImkFkisGPyBJbYV7RS1Fb8lV

UNSUPERVISED MACHINE LEARNING MATERI PENGENALAN 3

=> model machine learning akan mempelajari pola dan struktur pada data berdasarkan hubungan atau keterkaitan antar variabel pada data. 
   Model kemudian akan mengelompokkan data ini ke dalam beberapa klaster yang berbeda. Teknik ini disebut sebagai clustering. 

   Beberapa algoritma unsupervised learning yang penting untuk Anda ketahui adalah: 

   - clustering, 
   - dimensionality reduction, 
   - anomaly detection, 
   - density estimation. 

=>pengklasteran adalah sebuah metode machine learning unsupervised untuk mengelompokkan objek-objek yang memiliki kemiripan, ke dalam sebuah klaster. 
  Karena termasuk kategori unsupervised, maka dataset yang digunakan model clustering tidak memiliki label.

=>Bagaimana proses pemberian label ini? 
  - Data yang memiliki kemiripan akan dikelompokkan, lalu setiap data pada kelompok yang sama akan diberikan label yang sama.

=>Sebuah model pengklasteran akan membandingkan atribut setiap pengunjung lalu 
  membuat sebuah klaster yang diisi oleh pengunjung yang memiliki kemiripan karakteristik/atribut yang tinggi.

-> Hal yang paling pertama K-Means lakukan adalah memilih sebuah sampel secara acak untuk dijadikan centroid. Centroid adalah sebuah sampel pada data yang menjadi pusat dari sebuah klaster.
  Kita bisa melihat pada gambar bahwa 3 sampel yang dijadikan centroid diberi warna biru, hijau dan kuning.

# Bagian Baru
"""

import pandas as pd

df = pd.read_csv('Mall_Customers.csv')
 
# tampilkan 3 baris pertama
df.head(3)

df = df.rename(columns={
    'Gender': 'jenis_kelamin',
    'Age': 'umur',
    'Annual Income (k$)' : 'pendapatan_income',
    'Spending Score (1-100)' : 'score_habis'
})

df['jenis_kelamin'].replace(['Female', 'Male'], [0,1], inplace=True)

X = df.drop(['CustomerID', 'jenis_kelamin'], axis=1)

# mencari cluster yang paling optimal

from sklearn.cluster import KMeans



import seaborn as sns

wcss = []

for i in range(1,15):
  k = KMeans(i)
  k.fit(X)
  wcss.append(k.inertia_)

# membuat plot inertia
sns.lineplot(x=list(range(1, 15)), y=wcss)

# cluseter siku atau eibow method yaitu 5

km = KMeans(n_clusters=5, random_state=42).fit(X)
y_means = km.predict(X)
y_means

sns.scatterplot(X['pendapatan_income'], X['score_habis'], hue= y_means, palette=sns.color_palette('hls', 5))